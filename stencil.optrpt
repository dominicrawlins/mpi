Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(155,3) inlined into stencil.c(62,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(156,5) inlined into stencil.c(62,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(156,5) inlined into stencil.c(62,7)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(158,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 8.170 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(156,5) inlined into stencil.c(62,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at stencil.c(156,5) inlined into stencil.c(62,7)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(158,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(156,5) inlined into stencil.c(62,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(163,3) inlined into stencil.c(62,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(164,5) inlined into stencil.c(62,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(165,7) inlined into stencil.c(62,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(166,9) inlined into stencil.c(62,7)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at stencil.c(166,9) inlined into stencil.c(62,7)
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(168,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 7 
            remark #15477: vector loop cost: 0.750 
            remark #15478: estimated potential speedup: 8.070 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(166,9) inlined into stencil.c(62,7)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(168,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 2.000
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(166,9) inlined into stencil.c(62,7)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(68,3)
   remark #15382: vectorization support: call to function stencil(const short, const short, float *__restrict__, float *__restrict__) cannot be vectorized   [ stencil.c(69,5) ]
   remark #15382: vectorization support: call to function stencil(const short, const short, float *__restrict__, float *__restrict__) cannot be vectorized   [ stencil.c(70,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at stencil.c(192,3) inlined into stencil.c(85,6)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(193,5) inlined into stencil.c(85,6)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(193,5) inlined into stencil.c(85,6)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(194,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 4.100
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 7.840 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(193,5) inlined into stencil.c(85,6)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(200,3) inlined into stencil.c(85,6)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(202,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 202 and call:fputc(int, FILE *) line 202
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 202 and call:fputc(int, FILE *) line 202

   LOOP BEGIN at stencil.c(201,5) inlined into stencil.c(85,6)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(202,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stencil(const short, const short, float *__restrict__, float *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(102,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stencil.c(102,3)
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(103,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(103,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(104,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(104,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(104,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(105,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(105,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(105,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(106,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(106,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(106,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 49 
   remark #15477: vector loop cost: 8.250 
   remark #15478: estimated potential speedup: 5.520 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at stencil.c(102,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stencil.c(102,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at stencil.c(114,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(121,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(121,5)
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(122,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(122,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(123,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(123,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(123,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(124,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(124,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(124,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(125,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(125,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(125,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(126,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(126,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(126,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.581
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 5 
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 100 
      remark #15477: vector loop cost: 10.750 
      remark #15478: estimated potential speedup: 8.310 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(121,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(140,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stencil.c(140,3)
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(141,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(141,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(142,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(142,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(142,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(143,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(143,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(143,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(144,5) ]
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(144,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(144,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 93 
   remark #15477: vector loop cost: 8.250 
   remark #15478: estimated potential speedup: 9.830 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at stencil.c(140,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stencil.c(140,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: output_image(const char *, const short, const short, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(192,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(193,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(193,5)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(194,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 4.100
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 7.840 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(193,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(200,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(202,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 202 and call:fputc(int, FILE *) line 202
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 202 and call:fputc(int, FILE *) line 202

   LOOP BEGIN at stencil.c(201,5)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(202,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init_image(const short, const short, float *__restrict__, float *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(155,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(156,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(156,5)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(158,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 8.170 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(156,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at stencil.c(156,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(158,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(156,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(163,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(164,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(165,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(166,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at stencil.c(166,9)
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(168,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 7 
            remark #15477: vector loop cost: 0.750 
            remark #15478: estimated potential speedup: 8.070 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(166,9)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(168,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 2.000
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(166,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
